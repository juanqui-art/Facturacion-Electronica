---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import Button from '../components/Button.astro';
import Table from '../components/Table.astro';
---

<Layout title="Clientes - Facturaci√≥n SRI">
  <div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Gesti√≥n de Clientes</h1>
        <p class="text-gray-600">Administra todos los clientes de tu sistema</p>
      </div>
      <Button variant="primary" id="nuevo-cliente-btn">
        üë• Nuevo Cliente
      </Button>
    </div>

    <!-- Search Section -->
    <Card title="Buscar Cliente">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">C√©dula/RUC</label>
          <input type="text" id="buscar-cedula" placeholder="Ingresa c√©dula o RUC..." 
                 class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Nombre</label>
          <input type="text" id="buscar-nombre" placeholder="Buscar por nombre..." 
                 class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
        </div>
        <div class="flex items-end space-x-2">
          <Button variant="primary" id="buscar-btn" class="flex-1">
            üîç Buscar
          </Button>
          <Button variant="secondary" id="limpiar-btn">
            üßπ Limpiar
          </Button>
        </div>
      </div>
    </Card>

    <!-- Clientes List -->
    <Card>
      <div id="clientes-loading" class="flex items-center justify-center py-12">
        <div class="text-center">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p class="text-gray-600">Cargando clientes...</p>
        </div>
      </div>

      <div id="clientes-content" class="hidden">
        <div class="mb-4 flex justify-between items-center">
          <h3 class="text-lg font-medium text-gray-900">Lista de Clientes</h3>
          <div class="text-sm text-gray-500">
            Total: <span id="total-clientes">0</span> clientes
          </div>
        </div>
        
        <Table headers={["C√©dula/RUC", "Nombre", "Email", "Tel√©fono", "Tipo", "Fecha", "Acciones"]}>
          <tbody id="clientes-tbody">
            <!-- Los clientes se cargar√°n aqu√≠ din√°micamente -->
          </tbody>
        </Table>
      </div>

      <div id="clientes-empty" class="hidden text-center py-12">
        <div class="text-gray-500">
          <div class="text-6xl mb-4">üë•</div>
          <p class="text-lg font-medium">No hay clientes registrados</p>
          <p class="text-sm">Haz clic en "Nuevo Cliente" para comenzar</p>
        </div>
        <Button variant="primary" class="mt-4" onclick="openModal()">
          üë• Crear Primer Cliente
        </Button>
      </div>

      <div id="clientes-error" class="hidden text-center py-12">
        <div class="text-red-600">
          <p class="text-lg font-medium">Error al cargar clientes</p>
          <p class="text-sm">Por favor, intenta nuevamente</p>
        </div>
        <Button variant="primary" class="mt-4" onclick="searchClients()">
          üîÑ Reintentar
        </Button>
      </div>
    </Card>
  </div>

  <!-- Modal Nuevo/Editar Cliente -->
  <div id="modal-cliente" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen px-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-medium text-gray-900" id="modal-title">Nuevo Cliente</h3>
        </div>
        
        <form id="form-cliente" class="px-6 py-4 space-y-4">
          <!-- C√©dula/RUC -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">
              C√©dula/RUC <span class="text-red-500">*</span>
            </label>
            <input type="text" id="cliente-cedula" required maxlength="13"
                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
            <p class="mt-1 text-xs text-gray-500">10 d√≠gitos para c√©dula, 13 para RUC</p>
          </div>

          <!-- Nombre -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">
              Nombre Completo <span class="text-red-500">*</span>
            </label>
            <input type="text" id="cliente-nombre" required
                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
          </div>

          <!-- Tipo de Cliente -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Tipo de Cliente</label>
            <select id="cliente-tipo" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
              <option value="PERSONA_NATURAL">Persona Natural</option>
              <option value="EMPRESA">Empresa</option>
            </select>
          </div>

          <!-- Email -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <input type="email" id="cliente-email"
                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
          </div>

          <!-- Tel√©fono -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Tel√©fono</label>
            <input type="tel" id="cliente-telefono"
                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
          </div>

          <!-- Direcci√≥n -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Direcci√≥n</label>
            <textarea id="cliente-direccion" rows="2"
                     class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"></textarea>
          </div>
        </form>

        <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
          <Button variant="secondary" id="cancelar-cliente">
            Cancelar
          </Button>
          <Button variant="primary" id="guardar-cliente">
            üíæ Guardar Cliente
          </Button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal Confirmar Eliminaci√≥n -->
  <div id="modal-confirmar" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen px-4">
      <div class="bg-white rounded-lg shadow-xl max-w-sm w-full">
        <div class="px-6 py-4">
          <h3 class="text-lg font-medium text-gray-900 mb-2">Confirmar Eliminaci√≥n</h3>
          <p class="text-sm text-gray-600">¬øEst√°s seguro de que deseas eliminar este cliente?</p>
          <p class="text-xs text-gray-500 mt-2">Esta acci√≥n no se puede deshacer.</p>
        </div>
        
        <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
          <Button variant="secondary" id="cancelar-eliminar">
            Cancelar
          </Button>
          <Button variant="danger" id="confirmar-eliminar">
            üóëÔ∏è Eliminar
          </Button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // API Configuration
    const API_BASE = window.location.port === '4321' 
      ? 'http://localhost:8080/api'
      : window.location.origin + '/api';
    
    let currentClients: any[] = [];
    let editingClientId: number | null = null;
    let deletingClientId: number | null = null;

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
      initializeEventListeners();
      loadDefaultState();
    });

    function initializeEventListeners() {
      // Modal events
      const nuevoClienteBtn = document.getElementById('nuevo-cliente-btn');
      const cancelarClienteBtn = document.getElementById('cancelar-cliente');
      const guardarClienteBtn = document.getElementById('guardar-cliente');
      
      if (nuevoClienteBtn) nuevoClienteBtn.addEventListener('click', () => openModal());
      if (cancelarClienteBtn) cancelarClienteBtn.addEventListener('click', closeModal);
      if (guardarClienteBtn) guardarClienteBtn.addEventListener('click', saveClient);
      
      // Search events
      const buscarBtn = document.getElementById('buscar-btn');
      const limpiarBtn = document.getElementById('limpiar-btn');
      const buscarCedulaInput = document.getElementById('buscar-cedula') as HTMLInputElement;
      
      if (buscarBtn) buscarBtn.addEventListener('click', searchClients);
      if (limpiarBtn) limpiarBtn.addEventListener('click', clearSearch);
      if (buscarCedulaInput) {
        buscarCedulaInput.addEventListener('keypress', function(e: KeyboardEvent) {
          if (e.key === 'Enter') searchClients();
        });
      }
      
      // Delete confirmation events
      const cancelarEliminarBtn = document.getElementById('cancelar-eliminar');
      const confirmarEliminarBtn = document.getElementById('confirmar-eliminar');
      
      if (cancelarEliminarBtn) cancelarEliminarBtn.addEventListener('click', closeConfirmModal);
      if (confirmarEliminarBtn) confirmarEliminarBtn.addEventListener('click', deleteClient);
      
      // Close modals on backdrop click
      const modalCliente = document.getElementById('modal-cliente');
      const modalConfirmar = document.getElementById('modal-confirmar');
      
      if (modalCliente) {
        modalCliente.addEventListener('click', function(e: MouseEvent) {
          if (e.target === this) closeModal();
        });
      }
      if (modalConfirmar) {
        modalConfirmar.addEventListener('click', function(e: MouseEvent) {
          if (e.target === this) closeConfirmModal();
        });
      }
      
      // Form validation
      const clienteCedulaInput = document.getElementById('cliente-cedula') as HTMLInputElement;
      
      if (clienteCedulaInput) {
        clienteCedulaInput.addEventListener('input', validateCedula);
        clienteCedulaInput.addEventListener('blur', validateCedulaFormat);
      }
    }

    function loadDefaultState() {
      loadAllClients();
    }

    async function loadAllClients() {
      try {
        showLoading();
        
        const response = await fetch(`${API_BASE}/clientes/list?limit=100`);
        
        if (response.ok) {
          const result = await response.json();
          if (result.success && result.data && result.data.clientes) {
            currentClients = result.data.clientes;
            if (currentClients.length > 0) {
              displayClients(currentClients);
              showContent();
            } else {
              showEmpty();
            }
          } else {
            showEmpty();
          }
        } else {
          throw new Error(`Error ${response.status}`);
        }
      } catch (error) {
        console.error('Error loading all clients:', error);
        showEmpty();
      }
    }

    async function searchClients() {
      const cedulaInput = document.getElementById('buscar-cedula') as HTMLInputElement;
      const nombreInput = document.getElementById('buscar-nombre') as HTMLInputElement;
      
      const cedula = cedulaInput?.value.trim() || '';
      const nombre = nombreInput?.value.trim() || '';
      
      if (!cedula && !nombre) {
        // Si no hay filtros, cargar todos los clientes
        loadAllClients();
        return;
      }

      try {
        showLoading();
        
        if (cedula) {
          // Buscar por c√©dula usando el endpoint espec√≠fico
          await searchByCedula(cedula);
        } else if (nombre) {
          // Buscar por nombre usando el endpoint de listado con filtros
          await searchByName(nombre);
        }
      } catch (error) {
        console.error('Error searching clients:', error);
        showError();
      }
    }

    async function searchByCedula(cedula: string) {
      try {
        const response = await fetch(`${API_BASE}/clientes/buscar?cedula=${encodeURIComponent(cedula)}`);
        
        if (response.ok) {
          const result = await response.json();
          if (result.success && result.data) {
            currentClients = [result.data];
            displayClients(currentClients);
            showContent();
          } else {
            showEmpty();
          }
        } else if (response.status === 404) {
          showMessage('Cliente no encontrado con esa c√©dula', 'warning');
          showEmpty();
        } else {
          throw new Error(`Error ${response.status}`);
        }
      } catch (error) {
        console.error('Error searching by cedula:', error);
        showError();
      }
    }

    async function searchByName(nombre: string) {
      try {
        const response = await fetch(`${API_BASE}/clientes/list?nombre=${encodeURIComponent(nombre)}&limit=100`);
        
        if (response.ok) {
          const result = await response.json();
          if (result.success && result.data && result.data.clientes) {
            currentClients = result.data.clientes;
            if (currentClients.length > 0) {
              displayClients(currentClients);
              showContent();
            } else {
              showMessage('No se encontraron clientes con ese nombre', 'warning');
              showEmpty();
            }
          } else {
            showEmpty();
          }
        } else {
          throw new Error(`Error ${response.status}`);
        }
      } catch (error) {
        console.error('Error searching by name:', error);
        showError();
      }
    }

    function displayClients(clients: any[]) {
      const tbody = document.getElementById('clientes-tbody');
      const totalElement = document.getElementById('total-clientes');
      
      if (totalElement) {
        totalElement.textContent = String(clients.length);
      }
      
      if (tbody) {
        tbody.innerHTML = clients.map((client: any) => `
        <tr class="hover:bg-gray-50">
          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
            ${client.cedula}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
            ${client.nombre}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${client.email || '-'}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${client.telefono || '-'}
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getTipoColor(client.tipoCliente)}">
              ${getTipoLabel(client.tipoCliente)}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${formatDate(client.fechaCreacion)}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
            <button class="text-blue-600 hover:text-blue-900" onclick="editClient(${client.id})">
              ‚úèÔ∏è Editar
            </button>
            <button class="text-red-600 hover:text-red-900" onclick="confirmDelete(${client.id})">
              üóëÔ∏è Eliminar
            </button>
          </td>
        </tr>
      `).join('');
      }
    }

    function getTipoColor(tipo: string): string {
      return tipo === 'EMPRESA' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800';
    }

    function getTipoLabel(tipo: string): string {
      return tipo === 'EMPRESA' ? 'Empresa' : 'Persona Natural';
    }

    function formatDate(dateString: string): string {
      if (!dateString) return '-';
      return new Date(dateString).toLocaleDateString('es-ES');
    }

    function clearSearch() {
      const cedulaInput = document.getElementById('buscar-cedula') as HTMLInputElement;
      const nombreInput = document.getElementById('buscar-nombre') as HTMLInputElement;
      
      if (cedulaInput) cedulaInput.value = '';
      if (nombreInput) nombreInput.value = '';
      loadAllClients();
    }

    // Modal Management
    function openModal(clientData: any = null) {
      editingClientId = clientData?.id || null;
      const modal = document.getElementById('modal-cliente');
      const title = document.getElementById('modal-title');
      
      if (title) {
        title.textContent = clientData ? 'Editar Cliente' : 'Nuevo Cliente';
      }
      
      if (clientData) {
        fillForm(clientData);
      } else {
        resetForm();
      }
      
      if (modal) {
        modal.classList.remove('hidden');
      }
    }

    function closeModal() {
      const modal = document.getElementById('modal-cliente');
      if (modal) {
        modal.classList.add('hidden');
      }
      resetForm();
      editingClientId = null;
    }

    function fillForm(client: any) {
      const cedulaInput = document.getElementById('cliente-cedula') as HTMLInputElement;
      const nombreInput = document.getElementById('cliente-nombre') as HTMLInputElement;
      const tipoSelect = document.getElementById('cliente-tipo') as HTMLSelectElement;
      const emailInput = document.getElementById('cliente-email') as HTMLInputElement;
      const telefonoInput = document.getElementById('cliente-telefono') as HTMLInputElement;
      const direccionTextarea = document.getElementById('cliente-direccion') as HTMLTextAreaElement;
      
      if (cedulaInput) cedulaInput.value = client.cedula || '';
      if (nombreInput) nombreInput.value = client.nombre || '';
      if (tipoSelect) tipoSelect.value = client.tipoCliente || 'PERSONA_NATURAL';
      if (emailInput) emailInput.value = client.email || '';
      if (telefonoInput) telefonoInput.value = client.telefono || '';
      if (direccionTextarea) direccionTextarea.value = client.direccion || '';
    }

    function resetForm() {
      const form = document.getElementById('form-cliente') as HTMLFormElement;
      const tipoSelect = document.getElementById('cliente-tipo') as HTMLSelectElement;
      
      if (form) form.reset();
      if (tipoSelect) tipoSelect.value = 'PERSONA_NATURAL';
    }

    async function saveClient() {
      try {
        const formData = getFormData();
        
        // Validaciones b√°sicas
        if (!formData.cedula || !formData.nombre) {
          showMessage('C√©dula y nombre son campos obligatorios', 'error');
          return;
        }

        const response = await fetch(`${API_BASE}/clientes`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData)
        });

        if (response.ok) {
          const result = await response.json();
          if (result.success) {
            showMessage('Cliente guardado exitosamente', 'success', {
              title: '¬°√âxito!',
              action: 'loadAllClients()',
              actionText: 'Ver lista'
            });
            closeModal();
            
            // Recargar la lista de clientes
            loadAllClients();
          } else {
            throw new Error(result.message || 'Error al guardar cliente');
          }
        } else {
          const errorText = await response.text();
          throw new Error(errorText || `Error ${response.status}`);
        }
        
      } catch (error) {
        console.error('Error saving client:', error);
        showMessage('Error al guardar cliente: ' + error.message, 'error');
      }
    }

    function getFormData() {
      const cedulaInput = document.getElementById('cliente-cedula') as HTMLInputElement;
      const nombreInput = document.getElementById('cliente-nombre') as HTMLInputElement;
      const tipoSelect = document.getElementById('cliente-tipo') as HTMLSelectElement;
      const emailInput = document.getElementById('cliente-email') as HTMLInputElement;
      const telefonoInput = document.getElementById('cliente-telefono') as HTMLInputElement;
      const direccionTextarea = document.getElementById('cliente-direccion') as HTMLTextAreaElement;
      
      return {
        cedula: cedulaInput?.value.trim() || '',
        nombre: nombreInput?.value.trim() || '',
        tipoCliente: tipoSelect?.value || 'PERSONA_NATURAL',
        email: emailInput?.value.trim() || undefined,
        telefono: telefonoInput?.value.trim() || undefined,
        direccion: direccionTextarea?.value.trim() || undefined
      };
    }

    // Validation
    function validateCedula(e: Event) {
      const target = e.target as HTMLInputElement;
      if (target) {
        const value = target.value;
        // Solo permitir n√∫meros
        target.value = value.replace(/[^0-9]/g, '');
      }
    }

    function validateCedulaFormat(e: Event) {
      const target = e.target as HTMLInputElement;
      const tipoSelect = document.getElementById('cliente-tipo') as HTMLSelectElement;
      
      if (target && tipoSelect) {
        const cedula = target.value;
        if (cedula.length === 10) {
          tipoSelect.value = 'PERSONA_NATURAL';
        } else if (cedula.length === 13) {
          tipoSelect.value = 'EMPRESA';
        }
      }
    }

    // Delete functionality
    function confirmDelete(clientId: number) {
      deletingClientId = clientId;
      const modal = document.getElementById('modal-confirmar');
      if (modal) {
        modal.classList.remove('hidden');
      }
    }

    function closeConfirmModal() {
      const modal = document.getElementById('modal-confirmar');
      if (modal) {
        modal.classList.add('hidden');
      }
      deletingClientId = null;
    }

    function deleteClient() {
      // Por ahora solo mostramos mensaje ya que no hay endpoint de eliminaci√≥n
      showMessage('La eliminaci√≥n de clientes requiere implementaci√≥n adicional en el backend', 'info');
      closeConfirmModal();
    }

    function editClient(clientId: number) {
      const client = currentClients.find(c => c.id === clientId);
      if (client) {
        openModal(client);
      }
    }

    // UI State Management
    function showLoading() {
      const loadingEl = document.getElementById('clientes-loading');
      const contentEl = document.getElementById('clientes-content');
      const emptyEl = document.getElementById('clientes-empty');
      const errorEl = document.getElementById('clientes-error');
      
      if (loadingEl) loadingEl.classList.remove('hidden');
      if (contentEl) contentEl.classList.add('hidden');
      if (emptyEl) emptyEl.classList.add('hidden');
      if (errorEl) errorEl.classList.add('hidden');
    }

    function showContent() {
      const loadingEl = document.getElementById('clientes-loading');
      const contentEl = document.getElementById('clientes-content');
      const emptyEl = document.getElementById('clientes-empty');
      const errorEl = document.getElementById('clientes-error');
      
      if (loadingEl) loadingEl.classList.add('hidden');
      if (contentEl) contentEl.classList.remove('hidden');
      if (emptyEl) emptyEl.classList.add('hidden');
      if (errorEl) errorEl.classList.add('hidden');
    }

    function showEmpty() {
      const loadingEl = document.getElementById('clientes-loading');
      const contentEl = document.getElementById('clientes-content');
      const emptyEl = document.getElementById('clientes-empty');
      const errorEl = document.getElementById('clientes-error');
      
      if (loadingEl) loadingEl.classList.add('hidden');
      if (contentEl) contentEl.classList.add('hidden');
      if (emptyEl) emptyEl.classList.remove('hidden');
      if (errorEl) errorEl.classList.add('hidden');
    }

    function showError() {
      const loadingEl = document.getElementById('clientes-loading');
      const contentEl = document.getElementById('clientes-content');
      const emptyEl = document.getElementById('clientes-empty');
      const errorEl = document.getElementById('clientes-error');
      
      if (loadingEl) loadingEl.classList.add('hidden');
      if (contentEl) contentEl.classList.add('hidden');
      if (emptyEl) emptyEl.classList.add('hidden');
      if (errorEl) errorEl.classList.remove('hidden');
    }

    // Sistema de notificaciones usando Toast
    function showMessage(message: string, type: string = 'info', options: any = {}) {
      if ((window as any).toastManager) {
        (window as any).toastManager.show(message, type, 5000, options);
      } else {
        // Fallback si el toast no est√° disponible
        console.log(`${type.toUpperCase()}: ${message}`);
        alert(message);
      }
    }
  </script>
</Layout>