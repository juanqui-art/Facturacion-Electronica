---
// Sistema de notificaciones Toast mejorado
// Integrado con el nuevo sistema de notificaciones
---

<!-- Toast Container - Vercel Style -->
<div id="toast-container" class="fixed top-4 right-4 z-[1030] space-y-3 max-w-sm">
  <!-- Los toasts se insertan aquí dinámicamente -->
</div>

<style>
  .toast-enter {
    transform: translateX(100%) scale(0.95);
    opacity: 0;
  }
  
  .toast-show {
    transform: translateX(0) scale(1);
    opacity: 1;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .toast-exit {
    transform: translateX(100%) scale(0.95);
    opacity: 0;
    transition: all 0.2s cubic-bezier(0.4, 0, 1, 1);
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    #toast-container {
      top: 1rem;
      right: 1rem;
      left: 1rem;
      max-width: none;
    }
    
    .toast-enter,
    .toast-exit {
      transform: translateY(-100%) scale(0.95);
    }
    
    .toast-show {
      transform: translateY(0) scale(1);
    }
  }
</style>

<script>
  // Toast Manager optimizado para Vercel style y nuevas notificaciones
  class ModernToastManager {
    private container: HTMLElement | null = null;
    private toasts: Map<string, any> = new Map();
    
    constructor() {
      this.initialize();
    }

    private initialize(): void {
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          this.container = document.getElementById('toast-container');
        });
      } else {
        this.container = document.getElementById('toast-container');
      }
    }

    show(notification: any): string {
      if (!this.container) {
        console.warn('Toast container not found');
        return '';
      }

      const toast = this.createToast(notification);
      this.container.appendChild(toast);
      this.toasts.set(notification.id, { element: toast, timer: null });

      // Entrance animation
      requestAnimationFrame(() => {
        toast.classList.remove('toast-enter');
        toast.classList.add('toast-show');
      });

      // Auto-close
      if (notification.autoClose && notification.duration) {
        const timer = setTimeout(() => {
          this.hide(notification.id);
        }, notification.duration);
        this.toasts.get(notification.id)!.timer = timer;
      }

      return notification.id;
    }

    private createToast(notification: any): HTMLElement {
      const toast = document.createElement('div');
      toast.id = notification.id;
      toast.className = 'toast-enter bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 overflow-hidden min-w-0';

      const styles = this.getTypeStyles(notification.type);
      
      toast.innerHTML = `
        <div class="p-4">
          <div class="flex items-start gap-3">
            <div class="flex-shrink-0 w-5 h-5 mt-0.5 ${styles.textColor}">
              ${styles.icon}
            </div>
            <div class="flex-1 min-w-0">
              <p class="text-sm font-medium text-gray-900 dark:text-gray-100">
                ${notification.title}
              </p>
              ${notification.message ? `
                <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
                  ${notification.message}
                </p>
              ` : ''}
            </div>
            <div class="flex-shrink-0">
              <button 
                type="button" 
                class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors p-1 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700"
                onclick="window.modernToast.hide('${notification.id}')"
              >
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
                </svg>
              </button>
            </div>
          </div>
        </div>
        ${notification.autoClose ? `
          <div class="h-1 bg-gray-100 dark:bg-gray-700">
            <div class="h-full ${styles.progressColor} transition-all duration-100" style="width: 100%; animation: toast-countdown ${notification.duration}ms linear;"></div>
          </div>
        ` : ''}
      `;

      return toast;
    }

    private getTypeStyles(type: string) {
      const styles = {
        success: {
          textColor: 'text-green-600 dark:text-green-400',
          progressColor: 'bg-green-500',
          icon: `<svg fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                </svg>`
        },
        error: {
          textColor: 'text-red-600 dark:text-red-400',
          progressColor: 'bg-red-500',
          icon: `<svg fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
                </svg>`
        },
        warning: {
          textColor: 'text-amber-600 dark:text-amber-400',
          progressColor: 'bg-amber-500',
          icon: `<svg fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
                </svg>`
        },
        info: {
          textColor: 'text-blue-600 dark:text-blue-400',
          progressColor: 'bg-blue-500',
          icon: `<svg fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
                </svg>`
        }
      };

      return styles[type as keyof typeof styles] || styles.info;
    }

    hide(id: string): void {
      const toastData = this.toasts.get(id);
      if (!toastData) return;

      const { element, timer } = toastData;
      
      if (timer) clearTimeout(timer);

      element.classList.remove('toast-show');
      element.classList.add('toast-exit');

      setTimeout(() => {
        if (element.parentNode) {
          element.parentNode.removeChild(element);
        }
        this.toasts.delete(id);
      }, 200);
    }

    clear(): void {
      this.toasts.forEach((_, id) => this.hide(id));
    }
  }

  // CSS animations
  const style = document.createElement('style');
  style.textContent = `
    @keyframes toast-countdown {
      from { width: 100%; }
      to { width: 0%; }
    }
  `;
  document.head.appendChild(style);

  // Initialize
  window.modernToast = new ModernToastManager();

  // Legacy support
  window.toastManager = {
    success: (message: string, options: any = {}) => {
      const notification = {
        id: 'toast-' + Date.now(),
        type: 'success',
        title: options.title || 'Éxito',
        message,
        autoClose: true,
        duration: 5000
      };
      return window.modernToast.show(notification);
    },
    error: (message: string, options: any = {}) => {
      const notification = {
        id: 'toast-' + Date.now(),
        type: 'error',
        title: options.title || 'Error',
        message,
        autoClose: true,
        duration: 8000
      };
      return window.modernToast.show(notification);
    },
    warning: (message: string, options: any = {}) => {
      const notification = {
        id: 'toast-' + Date.now(),
        type: 'warning',
        title: options.title || 'Advertencia',
        message,
        autoClose: true,
        duration: 6000
      };
      return window.modernToast.show(notification);
    },
    info: (message: string, options: any = {}) => {
      const notification = {
        id: 'toast-' + Date.now(),
        type: 'info',
        title: options.title || 'Información',
        message,
        autoClose: true,
        duration: 5000
      };
      return window.modernToast.show(notification);
    }
  };
</script>